{"version":3,"sources":["components/DataProvider.js","components/TodoDelete.js","components/TodoInput.js","components/TodoListItem.js","components/TodoList.js","App.js","index.js"],"names":["DataContext","createContext","DataProvider","props","useState","todos","setTodos","useEffect","todoList","JSON","parse","localStorage","getItem","setItem","stringify","Provider","value","children","TodoDelete","checkAll","setCheckAll","useContext","todosLength","filter","todo","complete","length","className","htmlFor","type","name","id","onChange","newTodos","forEach","checked","onClick","TodoInput","todoName","setTodoName","todoInput","useRef","current","focus","autoComplete","onSubmit","e","preventDefault","required","placeholder","ref","target","TodoListItem","checkComplete","editTodos","edit","setEdit","editValue","setEditValue","saveTodo","disabled","TodoList","console","log","toggleComplete","index","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0ef8a60.chunk.js","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\r\n\r\nexport const DataContext = createContext();\r\n\r\nexport const DataProvider = (props) => {\r\n  // todo list 추가하기 위한 빈 배열\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  // localStorage에서 가져오기\r\n  useEffect(() => {\r\n    const todoList = JSON.parse(localStorage.getItem(\"todoList\"));\r\n    if (todoList) setTodos(todoList);\r\n  }, []);\r\n\r\n  // localStorage에 저장\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todoList\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  return (\r\n    <DataContext.Provider value={[todos, setTodos]}>\r\n      {props.children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"./DataProvider\";\r\n\r\nfunction TodoDelete() {\r\n  const [checkAll, setCheckAll] = useState(false);\r\n  const [todos, setTodos] = useContext(DataContext);\r\n\r\n  // all 클릭시 모든 true >> false, false >> true\r\n  const clickCheckAll = () => {\r\n    const newTodos = [...todos];\r\n    newTodos.forEach((todo) => {\r\n      todo.complete = !checkAll;\r\n    });\r\n    setTodos(newTodos);\r\n    setCheckAll(!checkAll);\r\n  };\r\n\r\n  // 삭제 클릭시 선택된 것 삭제\r\n  const clickDeleteBtn = () => {\r\n    const newTodos = todos.filter((todo) => {\r\n      return todo.complete === false;\r\n    });\r\n    setTodos(newTodos);\r\n    setCheckAll(false);\r\n  };\r\n\r\n  // check 제외한 할 일 개수\r\n  const todosLength = todos.filter((todo) => todo.complete === false).length;\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <label htmlFor=\"all\">\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"all\"\r\n          id=\"all\"\r\n          onChange={clickCheckAll}\r\n          checked={checkAll}\r\n        />\r\n        All\r\n      </label>\r\n      <p>남은 할 일 : {todosLength}개</p>\r\n      <button id=\"delete\" onClick={clickDeleteBtn}>\r\n        삭제\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoDelete;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useContext, useEffect } from \"react/cjs/react.development\";\r\nimport { DataContext } from \"./DataProvider\";\r\n\r\nfunction TodoInput() {\r\n  const [todos, setTodos] = useContext(DataContext);\r\n  const [todoName, setTodoName] = useState(\"\");\r\n  const todoInput = useRef();\r\n\r\n  // 등록시 todo list에 추가\r\n  const addTodo = (e) => {\r\n    e.preventDefault(); // 새로고침 방지\r\n    setTodos([...todos, { name: todoName, complete: false }]);\r\n    setTodoName(\"\");\r\n  };\r\n\r\n  // 할 일 입력창 focus\r\n  useEffect(() => {\r\n    todoInput.current.focus();\r\n  });\r\n\r\n  return (\r\n    <form autoComplete=\"off\" onSubmit={addTodo}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"todos\"\r\n        id=\"todos\"\r\n        required\r\n        placeholder=\"오늘 해야 할 일\"\r\n        value={todoName}\r\n        ref={todoInput}\r\n        onChange={(e) => setTodoName(e.target.value)} // input에 입력한 값\r\n      />\r\n      <button type=\"submit\">등록</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoInput;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TodoListItem({ todo, id, checkComplete, editTodos }) {\r\n  const [edit, setEdit] = useState(false);\r\n  const [editValue, setEditValue] = useState(todo.name);\r\n\r\n  // 수정 클릭시 내용 수정\r\n  const todoEdit = () => {\r\n    setEdit(true);\r\n  };\r\n\r\n  // 저장 클릭시 다시 리스트 목록 보여줌\r\n  const saveTodo = (id) => {\r\n    setEdit(false);\r\n    if (editValue) {\r\n      editTodos(editValue, id);\r\n    } else {\r\n      setEditValue(todo.name);\r\n    }\r\n  };\r\n\r\n  if (edit) {\r\n    // 내용 수정하기\r\n    return (\r\n      <li>\r\n        <input\r\n          type=\"text\"\r\n          id=\"editValue\"\r\n          name=\"editValue\"\r\n          value={editValue}\r\n          onChange={(e) => setEditValue(e.target.value)}\r\n        />\r\n        <button\r\n          className=\"saveBtn\"\r\n          onClick={() => {\r\n            saveTodo(id);\r\n          }}\r\n        >\r\n          저장\r\n        </button>\r\n      </li>\r\n    );\r\n  } else {\r\n    // 리스트 목록\r\n    return (\r\n      <li>\r\n        <label htmlFor={id} className={todo.complete ? \"active\" : \"\"}>\r\n          <input\r\n            type=\"checkbox\"\r\n            id={id}\r\n            checked={todo.complete}\r\n            onChange={() => checkComplete(id)}\r\n          />\r\n          {todo.name}\r\n        </label>\r\n        <button\r\n          className=\"editBtn\"\r\n          disabled={todo.complete ? \"disabled\" : \"\"}\r\n          onClick={todoEdit}\r\n        >\r\n          수정\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoListItem;\r\n","import React, { useContext } from \"react\";\r\nimport { DataContext } from \"./DataProvider\";\r\nimport TodoListItem from \"./TodoListItem\";\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useContext(DataContext);\r\n  console.log(todos);\r\n\r\n  // check 클릭시 true >> false, false >> true\r\n  const toggleComplete = (id) => {\r\n    const newTodos = [...todos];\r\n    newTodos.forEach((todo, index) => {\r\n      if (index === id) {\r\n        todo.complete = !todo.complete;\r\n      }\r\n    });\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  // 수정값(editValue) setTodos에 저장하기\r\n  const editTodos = (editValue, id) => {\r\n    const newTodos = [...todos];\r\n    newTodos.forEach((todo, index) => {\r\n      if (index === id) {\r\n        todo.name = editValue;\r\n      }\r\n    });\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {todos.map((todo, index) => (\r\n        <TodoListItem\r\n          todo={todo}\r\n          key={index}\r\n          id={index}\r\n          checkComplete={toggleComplete}\r\n          editTodos={editTodos}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import \"./App.css\";\nimport { DataProvider } from \"./components/DataProvider\";\nimport TodoDelete from \"./components/TodoDelete\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <DataProvider>\n      <div className=\"App\">\n        <h1>To Do List</h1>\n        <TodoInput />\n        <TodoList />\n        <TodoDelete />\n      </div>\n    </DataProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}